// Archivo de prueba para MongoDB
// Este archivo permite probar la conexi√≥n y funcionalidad b√°sica de MongoDB

const {
    connectToMongoDB,
    crearCliente,
    obtenerClientes,
    obtenerClientePorId,
    actualizarCliente,
    eliminarCliente,
    crearProducto,
    obtenerProductos,
    crearMembresia,
    obtenerMembresias,
    obtenerEstadisticas,
    closeConnection
} = require('./mongodb-config');

// Datos de prueba
const clientePrueba = {
    nombre: "Juan",
    apellidos: "P√©rez Garc√≠a",
    edad: 28,
    enfermedadCronica: "Ninguna",
    alergia: "Ninguna",
    tipoMembresia: "Mensual",
    direccion: "Calle Principal 123, Ciudad",
    fechaInicio: new Date(),
    fechaFin: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // 30 d√≠as
};

const productoPrueba = {
    nombre: "Prote√≠na Whey",
    precio: 45.99,
    stock: 50,
    categoria: "Suplementos",
    descripcion: "Prote√≠na de suero de leche de alta calidad",
    imagen: "proteina-whey.jpg"
};

const membresiaPrueba = {
    nombre: "Membres√≠a Premium",
    precio: 89.99,
    duracion: 30,
    descripcion: "Acceso completo a todas las instalaciones",
    beneficios: ["Gimnasio completo", "Clases grupales", "Entrenador personal", "Spa"]
};

// Funci√≥n principal de prueba
async function ejecutarPruebas(environment = 'local') {
    console.log(`üöÄ Iniciando pruebas de MongoDB (${environment})...\n`);
    
    try {
        // 1. Probar conexi√≥n
        console.log('1Ô∏è‚É£ Probando conexi√≥n a MongoDB...');
        await connectToMongoDB(environment);
        console.log('‚úÖ Conexi√≥n exitosa\n');
        
        // 2. Probar creaci√≥n de cliente
        console.log('2Ô∏è‚É£ Probando creaci√≥n de cliente...');
        const clienteId = await crearCliente(clientePrueba, environment);
        console.log(`‚úÖ Cliente creado con ID: ${clienteId}\n`);
        
        // 3. Probar obtenci√≥n de clientes
        console.log('3Ô∏è‚É£ Probando obtenci√≥n de clientes...');
        const clientes = await obtenerClientes(environment);
        console.log(`‚úÖ Total de clientes: ${clientes.length}\n`);
        
        // 4. Probar obtenci√≥n de cliente por ID
        console.log('4Ô∏è‚É£ Probando obtenci√≥n de cliente por ID...');
        const cliente = await obtenerClientePorId(clienteId, environment);
        if (cliente) {
            console.log(`‚úÖ Cliente encontrado: ${cliente.nombre} ${cliente.apellidos}\n`);
        }
        
        // 5. Probar actualizaci√≥n de cliente
        console.log('5Ô∏è‚É£ Probando actualizaci√≥n de cliente...');
        const actualizado = await actualizarCliente(clienteId, {
            edad: 29,
            tipoMembresia: "Anual"
        }, environment);
        console.log(`‚úÖ Cliente actualizado: ${actualizado}\n`);
        
        // 6. Probar creaci√≥n de producto
        console.log('6Ô∏è‚É£ Probando creaci√≥n de producto...');
        const productoId = await crearProducto(productoPrueba, environment);
        console.log(`‚úÖ Producto creado con ID: ${productoId}\n`);
        
        // 7. Probar obtenci√≥n de productos
        console.log('7Ô∏è‚É£ Probando obtenci√≥n de productos...');
        const productos = await obtenerProductos(environment);
        console.log(`‚úÖ Total de productos: ${productos.length}\n`);
        
        // 8. Probar creaci√≥n de membres√≠a
        console.log('8Ô∏è‚É£ Probando creaci√≥n de membres√≠a...');
        const membresiaId = await crearMembresia(membresiaPrueba, environment);
        console.log(`‚úÖ Membres√≠a creada con ID: ${membresiaId}\n`);
        
        // 9. Probar obtenci√≥n de membres√≠as
        console.log('9Ô∏è‚É£ Probando obtenci√≥n de membres√≠as...');
        const membresias = await obtenerMembresias(environment);
        console.log(`‚úÖ Total de membres√≠as: ${membresias.length}\n`);
        
        // 10. Probar estad√≠sticas
        console.log('üîü Probando obtenci√≥n de estad√≠sticas...');
        const estadisticas = await obtenerEstadisticas(environment);
        console.log('‚úÖ Estad√≠sticas obtenidas:');
        console.log(`   - Total clientes: ${estadisticas.totalClientes}`);
        console.log(`   - Total productos: ${estadisticas.totalProductos}`);
        console.log(`   - Total membres√≠as: ${estadisticas.totalMembresias}`);
        console.log(`   - Clientes activos: ${estadisticas.clientesActivos}`);
        console.log(`   - Productos bajo stock: ${estadisticas.productosBajoStock}\n`);
        
        // 11. Probar eliminaci√≥n de cliente
        console.log('1Ô∏è‚É£1Ô∏è‚É£ Probando eliminaci√≥n de cliente...');
        const eliminado = await eliminarCliente(clienteId, environment);
        console.log(`‚úÖ Cliente eliminado: ${eliminado}\n`);
        
        console.log('üéâ ¬°Todas las pruebas completadas exitosamente!');
        
    } catch (error) {
        console.error('‚ùå Error durante las pruebas:', error);
    } finally {
        // Cerrar conexi√≥n
        await closeConnection();
        console.log('üîå Conexi√≥n cerrada');
    }
}

// Funci√≥n para probar MongoDB Atlas
async function probarMongoDBAtlas() {
    console.log('‚òÅÔ∏è Probando conexi√≥n a MongoDB Atlas...\n');
    
    try {
        // Verificar si existe la variable de entorno para Atlas
        if (!process.env.MONGODB_ATLAS_URI) {
            console.log('‚ö†Ô∏è No se encontr√≥ la variable MONGODB_ATLAS_URI');
            console.log('   Para probar Atlas, agrega tu string de conexi√≥n al archivo .env');
            return;
        }
        
        // Ejecutar todas las pruebas con Atlas
        await ejecutarPruebas('atlas');
        
    } catch (error) {
        console.error('‚ùå Error conectando a Atlas:', error);
    }
}

// Funci√≥n para mostrar informaci√≥n de configuraci√≥n
function mostrarConfiguracion() {
    console.log('üìã Configuraci√≥n de MongoDB:');
    console.log('============================');
    
    if (process.env.MONGODB_LOCAL_URI) {
        console.log('‚úÖ MONGODB_LOCAL_URI: Configurado');
    } else {
        console.log('‚ö†Ô∏è MONGODB_LOCAL_URI: No configurado (usando valor por defecto)');
    }
    
    if (process.env.MONGODB_ATLAS_URI) {
        console.log('‚úÖ MONGODB_ATLAS_URI: Configurado');
    } else {
        console.log('‚ö†Ô∏è MONGODB_ATLAS_URI: No configurado');
    }
    
    console.log('');
}

// Ejecutar pruebas seg√∫n argumentos
const args = process.argv.slice(2);

if (args.includes('--atlas')) {
    mostrarConfiguracion();
    probarMongoDBAtlas();
} else if (args.includes('--config')) {
    mostrarConfiguracion();
} else {
    mostrarConfiguracion();
    ejecutarPruebas('local');
}

// Exportar funciones para uso en otros archivos
module.exports = {
    ejecutarPruebas,
    probarMongoDBAtlas,
    mostrarConfiguracion
}; 